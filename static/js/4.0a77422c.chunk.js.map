{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/MessagesByForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","withAuthRedirect","Component","this","props","isAuth","to","React","DialogItem","id","className","classes","dialog","active","src","name","Message","container","messageblue","message","messagetimestampleft","maxLength50","maxLengthCreator","MessagesReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","required","Dialogs","state","dialogsPage","newDialogs","dialogs","map","key","newDialogsMessages","messages","dialogsAll","value","addMessageCreator","newMessageText","compose","connect","auth","dispatch"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,WAAa,4BAA4B,QAAU,yBAAyB,OAAS,wBAAwB,SAAW,0BAA0B,KAAO,sBAAsB,UAAY,2BAA2B,YAAc,6BAA6B,eAAiB,gCAAgC,sBAAwB,uCAAuC,qBAAuB,wC,+HCG7YC,EAAmB,SAACC,GAQ7B,OARgD,uKAGxC,OAAKC,KAAKC,MAAMC,OACT,kBAACH,EAAcC,KAAKC,OADI,kBAAC,IAAD,CAAUE,GAAG,eAHJ,GAChBC,IAAML,a,8FCe3BM,EAXI,SAACJ,GACMA,EAAMK,GAC9B,OACE,yBAAKC,UAAWC,IAAQC,OAAS,IAAMD,IAAQE,QAE7C,yBAAKC,IAAI,wHACT,kBAAC,IAAD,CAASR,GAAI,YAAcF,EAAMK,IAAKL,EAAMW,QCOnCC,EAfC,SAACZ,GAEf,OACE,yBAAKM,UAAWC,IAAQM,WACtB,yBAAKP,UAAWC,IAAQO,aACtB,yBAAKR,UAAWC,IAAQQ,SAAUf,EAAMe,SAExC,yBAAKT,UAAWC,IAAQS,sBAAxB,Y,kCCJFC,EAAcC,YAAiB,KAoBxBC,EAAoBC,YAAwB,CAACC,KAAK,wBAA9BD,EAnB8B,SAACpB,GAE5D,OAAQ,0BAAMsB,SAAUtB,EAAMuB,cACtB,6BACI,kBAACC,EAAA,EAAD,CACIC,YAAa,UACbd,KAAM,iBACNe,UAAWC,IACXC,SAAU,CAACC,IAAUZ,KAKzB,iDCoCDa,EA/BC,SAAC9B,GAEb,IAAI+B,EAAQ/B,EAAMgC,YAEdC,EAAaF,EAAMG,QAAQC,KAAI,SAAC3B,GAChC,OAAO,kBAAC,EAAD,CAAYG,KAAMH,EAAOG,KAAMN,GAAIG,EAAOH,GAAI+B,IAAK5B,EAAOH,QAEjEgC,EAAqBN,EAAMO,SAASH,KAAI,SAACpB,GAAD,OACxC,kBAAC,EAAD,CAASA,QAASA,EAAQA,QAASqB,IAAKrB,EAAQV,QASpD,OACI,yBAAKC,UAAWC,IAAQgC,YACpB,yBAAKjC,UAAWC,IAAQ2B,SAAUD,GAGlC,kBAACd,EAAD,CAAmBG,SAVL,SAACkB,GAEnBxC,EAAMyC,kBAAkBD,EAAME,mBAW1B,yBAAKpC,UAAWC,IAAQ+B,UAAWD,K,wBC6DhCM,sBAEXC,aAxCkB,SAACb,GAGnB,MAAO,CACHC,YAAaD,EAAMC,YACnB/B,OAAQ8B,EAAMc,KAAK5C,WAWF,SAAC6C,GAEtB,MAAO,CAIHL,kBAAmB,SAACC,GAChBI,EAASL,YAAkBC,SAkBnC7C,IAHW8C,CAKbb","file":"static/js/4.0a77422c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsAll\":\"Dialogs_dialogsAll__1rOyC\",\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"time\":\"Dialogs_time__3JkHD\",\"container\":\"Dialogs_container__2p0uA\",\"messageblue\":\"Dialogs_messageblue__10yz-\",\"messagecontent\":\"Dialogs_messagecontent__3C8Ol\",\"messagetimestampright\":\"Dialogs_messagetimestampright__1n5GG\",\"messagetimestampleft\":\"Dialogs_messagetimestampleft__1XK1g\"};","import React from \"react\";\nimport {Redirect} from \"react-router\";\n\n\nexport const withAuthRedirect = (Component: any) => {\n    class RedirectComponent extends React.Component<any, any> {\n        render() {\n            if (!this.props.isAuth) return <Redirect to='/login'/>\n            return <Component {...this.props}/>\n        }\n    }\n\n    return RedirectComponent\n}","import React from \"react\";\nimport classes from \"./../Dialogs.module.css\";\nimport { NavLink } from \"react-router-dom\";\n\ntype DialogsItemType = {\n  name: string;\n  id: number;\n};\n\nconst DialogItem = (props: DialogsItemType) => {\n  let path = \"/dialogs\" + props.id;\n  return (\n    <div className={classes.dialog + \" \" + classes.active}>\n\n      <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcS4bkPT14o4_n_lnU-3DNyZol1LE0vParolHN-kXQTD8exgO4-8&usqp=CAU\"></img>\n      <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\n    </div>\n  );\n};\n\nexport default DialogItem;\n","import React from \"react\";\nimport classes from \"./../Dialogs.module.css\";\n\ntype DialogsMessagesType = {\n  message: string;\n};\n\nconst Message = (props: DialogsMessagesType) => {\n\n  return(\n    <div className={classes.container}>\n      <div className={classes.messageblue}>\n        <div className={classes.message}>{props.message}</div>\n          {/*<button>Del</button>*/}\n        <div className={classes.messagetimestampleft}>17:15</div>\n      </div>\n    </div>\n\n)\n\n};\n\nexport default Message;\n","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\n\ntype FormDataType = {\n    newMessageText: string\n\n}\n\nconst maxLength50 = maxLengthCreator(100)\nconst MessagesForm:React.FC<InjectedFormProps<FormDataType>> = (props: any) => {\n\n    return (<form onSubmit={props.handleSubmit}>\n            <div>\n                <Field\n                    placeholder={'message'}\n                    name={'newMessageText'}\n                    component={Textarea}\n                    validate={[required, maxLength50]}\n                >\n                </Field>\n\n\n                <button>Add post</button>\n            </div>\n    </form>\n   )\n}\n\nexport const MessagesReduxForm = reduxForm<FormDataType>({form:'dialogAddMessageForm'})(MessagesForm)\n\n","import React from \"react\";\nimport classes from \"./Dialogs.module.css\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport {\n    dialogsTypeState,\n} from \"../../redux/state\";\n\nimport {MessagesReduxForm} from \"./MessagesByForm\";\n\n\nexport type dialogsDataType = {\n    id: number;\n    name: string;\n};\nexport type dialogsMessagesDataType = {\n    id: number;\n    message: string;\n};\n\n\ntype dialogsAndMessagesType = {\n    updateNewMessageText: (text: string) => void\n    addMessageCreator: () => void\n    dialogsPage: dialogsTypeState\n    updateNEwMessageTextCreator: (text: string) => void\n    isAuth: boolean\n};\n\nconst Dialogs = (props: any) => {\n\n    let state = props.dialogsPage\n\n    let newDialogs = state.dialogs.map((dialog: dialogsDataType) => {\n        return <DialogItem name={dialog.name} id={dialog.id} key={dialog.id}/>;\n    });\n    let newDialogsMessages = state.messages.map((message: dialogsMessagesDataType) => (\n        <Message message={message.message} key={message.id}/>\n    ));\n\n\n    const addNewMessage = (value: any) => {\n\n        props.addMessageCreator(value.newMessageText)\n    }\n\n    return (\n        <div className={classes.dialogsAll}>\n            <div className={classes.dialogs}>{newDialogs}</div>\n\n\n            <MessagesReduxForm onSubmit={addNewMessage}/>\n\n\n            <div className={classes.messages}>{newDialogsMessages}</div>\n\n        </div>\n    );\n};\n\nexport default Dialogs;\n","// import React from \"react\";\n// import {addMessageCreator, updateNEwMessageTextCreator, DialogsActionType} from \"../../redux/dialogs-reducer\"\n// import Dialogs from \"./Dialogs\";\n// import {connect, ConnectedComponent} from \"react-redux\";\n// import {Redirect} from \"react-router\";\n//\n//\n// export type dialogsDataType = {\n//     id: number;\n//     name: string;\n// };\n// export type dialogsMessagesDataType = {\n//     id: number;\n//     message: string;\n// };\n//\n// class DialogsContainer extends React.Component<any, any> {\n//     componentDidMount() {\n//     }\n//\n//     render() {\n//         if (this.props.isAuth == false)return <Redirect to='/login'/>\n//         return <Dialogs isAuth={this.props.isAuth}\n//                         addMessageCreator={this.props.addMessageCreator}\n//                         dialogsPage={this.props.dialogsPage}\n//                         updateNewMessageText={this.props.updateNewMessageText}\n//                         updateNEwMessageTextCreator={this.props.updateNEwMessageTextCreator} />\n//     }\n// }\n//\n// let mapDispatchToProps = (dispatch:(action: DialogsActionType) => void) => {//а тут колбэки которые м ыбудем отправлять\n//     // в нашу презентационную компоненту\n//     return {\n//         updateNEwMessageTextCreator:(text: string)=>{\n//             dispatch(updateNEwMessageTextCreator(text));\n//         },\n//         addMessageCreator:()=>{\n//             dispatch(addMessageCreator())\n//         }\n//     }\n// }\n//\n//\n// let mapStateToProps = (state:any) => {//в нашем первом объекте мы\n//     // берем данные из STATE, смысл этой функции замапить стейт на\n//     // пропсы и превратить чать стейта в пропсы\n//     return {\n//         dialogsPage: state.dialogsPage,\n//         isAuth: state.auth.isAuth\n//     }\n// }\n//\n//\n// export default connect(mapStateToProps,mapDispatchToProps)(Dialogs);\n//\n//\n\n\n/////старая версия******************//////////\nimport React from \"react\";\nimport {addMessageCreator, DialogsActionType} from \"../../redux/dialogs-reducer\"\nimport Dialogs from \"./Dialogs\";\nimport {connect, ConnectedComponent} from \"react-redux\";\nimport {Redirect} from \"react-router\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\nexport type dialogsDataType = {\n    id: number;\n    name: string;\n};\nexport type dialogsMessagesDataType = {\n    id: number;\n    message: string;\n};\n\nlet mapStateToProps = (state: any) => {//в нашем первом объекте мы\n    // берем данные из STATE, смысл этой функции замапить стейт на\n    // пропсы и превратить чать стейта в пропсы\n    return {\n        dialogsPage: state.dialogsPage,\n        isAuth: state.auth.isAuth\n    }\n}\nlet mapStateToPropsForRedirect = (state: any) => {//в нашем первом объекте мы\n    // берем данные из STATE, смысл этой функции замапить стейт на\n    // пропсы и превратить чать стейта в пропсы\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nlet mapDispatchToProps = (dispatch: (action: DialogsActionType) => void) => {//а тут колбэки которые м ыбудем отправлять\n    // в нашу презентационную компоненту\n    return {\n        // updateNEwMessageTextCreator: (text: string) => {\n        //     dispatch(updateNEwMessageTextCreator(text));\n        // },\n        addMessageCreator: (newMessageText:string) => {\n            dispatch(addMessageCreator(newMessageText))\n        }\n    }\n}\n\n// let AuthRedirectComponent:any = withAuthRedirect(Dialogs)\n// AuthRedirectComponent=connect(mapStateToPropsForRedirect)(AuthRedirectComponent)\n\n// const DialogsContainer:ConnectedComponent<any, any> = (AuthRedirectComponent);\n\n\n//\n// export default DialogsContainer;\n\n\nexport default compose<React.ComponentType>(\n\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect,\n\n)(Dialogs);\n"],"sourceRoot":""}