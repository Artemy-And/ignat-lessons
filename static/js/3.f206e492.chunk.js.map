{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/ProfileItem/ProfileItem.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHook.tsx","components/Profile/ProfileItem/ProfileItem.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["withAuthRedirect","Component","this","props","isAuth","to","React","module","exports","ProfileStatusWithHook","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","getUpdateUserStatus","value","onChange","e","currentTarget","ProfileItem","profile","className","classes","avaDescription","fullName","src","photos","large","contacts","facebook","github","lookingForAJobDescription","ToggleIsFetching","Post","item","message","likesCount","MyPosts","memo","newMessagesData","posts","map","countLikes","postAll","MyPostsFormReduxForm","onSubmit","addPost","newPostText","console","log","maxLengthCreator10","maxLengthCreator","MyPostsForm","handleSubmit","Field","placeholder","name","component","Textarea","validate","required","reduxForm","form","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","match","params","authorizedUserId","getUserProfile","getUserStatus","nextProps","nextState","nextContext","compose","withRouter","auth"],"mappings":"qMAIaA,EAAmB,SAACC,GAQ7B,OARgD,uKAGxC,OAAKC,KAAKC,MAAMC,OACT,kBAACH,EAAcC,KAAKC,OADI,kBAAC,IAAD,CAAUE,GAAG,eAHJ,GAChBC,IAAML,a,oBCJ1CM,EAAOC,QAAU,CAAC,eAAiB,sC,oBCAnCD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,MAAQ,yB,oBCA7DD,EAAOC,QAAU,CAAC,QAAU,sBAAsB,KAAO,qB,+HCE5CC,EAAwB,SAACN,GAAgB,IAAD,EAEnBO,oBAAkB,GAFC,mBAE5CC,EAF4C,KAElCC,EAFkC,OAGvBF,mBAASP,EAAMU,QAHQ,mBAG5CA,EAH4C,KAGpCC,EAHoC,KAIjDC,qBAAU,WACND,EAAUX,EAAMU,UACjB,CAACV,EAAMU,SAaV,OACI,8BACMF,GACF,6BACI,0BAAMK,cAfS,WACvBJ,GAAY,KAcwCT,EAAMU,QAAU,cAA5D,OAGHF,GACD,6BACI,2BAAOM,WAAW,EAAMC,OAjBR,WACxBN,GAAY,GACZT,EAAMgB,oBAAoBN,IAeqCO,MAAOP,EAAQQ,SAb7D,SAACC,GAClBR,EAAUQ,EAAEC,cAAcH,aCqBnBI,EAjCK,SAACrB,GAEjB,OAAKA,EAAMsB,QAIX,6BACE,8BAUA,yBAAKC,UAAWC,IAAQC,gBACpB,0CAAgBzB,EAAMsB,QAAQI,UAC9B,yBAAKC,IAAK3B,EAAMsB,QAAQM,OAAOC,QAC/B,kBAAC,EAAD,CAAuBnB,OAAQV,EAAMU,OAAQM,oBAAqBhB,EAAMgB,sBACxE,6BACA,2CAAiBhB,EAAMsB,QAAQQ,SAASC,UACxC,2CAAiB/B,EAAMsB,QAAQQ,SAASE,SAExC,6BACI,8IAA0BhC,EAAMsB,QAAQW,4BAThD,qBAdS,kBAACC,EAAA,EAAD,O,4CCWAC,EAbF,SAACnC,GACZ,OACE,yBAAKuB,UAAWC,IAAQY,MACtB,yBAAKT,IAAI,wHACR3B,EAAMqC,QAEP,6BACE,8BAAOrC,EAAMsC,e,kCCKfC,EAAUpC,IAAMqC,MAAK,SAACxC,GACxB,IAAIyC,EAAkBzC,EAAM0C,MAAMC,KAAI,SAACP,GACnC,OAAO,kBAAC,EAAD,CAAMC,QAASD,EAAKC,QAASC,WAAYF,EAAKQ,gBAOzD,OACI,yBAAKrB,UAAWC,IAAQqB,SAAxB,WAEI,kBAACC,EAAD,CAAsBC,SAPX,SAAC9B,GAChBjB,EAAMgD,QAAQ/B,EAAMgC,gBAOhB,yBAAK1B,UAAWC,IAAQkB,OAAQD,OAI5CS,QAAQC,IAAI,YAIZ,IAAMC,EAAqBC,YAAiB,IACtCC,EAAwDnD,IAAMqC,MAAK,SAACxC,GACtE,OAAQ,0BAAM+C,SAAU/C,EAAMuD,cAC1B,6BACI,6BACI,kBAACC,EAAA,EAAD,CACIC,YAAa,OACbC,KAAM,cACNC,UAAWC,IACXC,SAAU,CAAEC,IAAUV,MAG9B,6BACI,kDAMHN,EAAuBiB,YAAwB,CAACC,KAAM,WAA/BD,CAA2CT,GAGhEf,I,QC3BA0B,EAHUC,aAdD,SAACC,GACrB,MAAO,CACHzB,MAAOyB,EAAMC,YAAY1B,UAKR,SAAC2B,GACtB,MAAO,CACHrB,QAAS,SAACC,GACNoB,EAASC,YAAqBrB,QAIjBiB,CAA4C3B,GCVtDgC,EAVCpE,IAAMqC,MAAK,SAACxC,GAExB,OADAkD,QAAQC,IAAI,WAER,6BACI,kBAAC,EAAD,CAAa7B,QAAStB,EAAMsB,QAASZ,OAAQV,EAAMU,OAAQM,oBAAqBhB,EAAMgB,sBACtF,kBAAC,EAAD,U,uBCTNwD,E,kLAIE,IAAIC,EAAS1E,KAAKC,MAAM0E,MAAMC,OAAOF,OAChCA,IACDA,EAAS1E,KAAKC,MAAM4E,kBAKxB7E,KAAKC,MAAM6E,eAAeJ,GAEtB1E,KAAKC,MAAM8E,cAAcL,K,4CAIfM,EAA0BC,EAA0BC,GAClE,OAAOF,GAAahF,KAAKC,OAASgF,GAAYjF,KAAKoE,Q,+BAOnD,OAHAjB,QAAQC,IAAI,qBAIR,kBAAC,EAAD,iBAAapD,KAAKC,MAAlB,CAAyBsB,QAASvB,KAAKC,MAAMsB,QAASZ,OAAQX,KAAKC,MAAMU,OAAQM,oBAAqBjB,KAAKC,MAAMgB,oBAAqBf,OAAQF,KAAKC,MAAMC,c,GA1BtIE,IAAML,WA0CtBoF,sBACXC,IACAjB,aAVkB,SAACC,GAAD,MAAiB,CACnC7C,QAAS6C,EAAMC,YAAY9C,QAC3BrB,OAAQkE,EAAMiB,KAAKnF,OACnBS,OAAQyD,EAAMC,YAAY1D,OAC1BkE,iBAAiBT,EAAMM,UAME,CAACI,mBAAeC,kBAAc9D,0BACvDnB,IAHWqF,CAIbV","file":"static/js/3.f206e492.chunk.js","sourcesContent":["import React from \"react\";\nimport {Redirect} from \"react-router\";\n\n\nexport const withAuthRedirect = (Component: any) => {\n    class RedirectComponent extends React.Component<any, any> {\n        render() {\n            if (!this.props.isAuth) return <Redirect to='/login'/>\n            return <Component {...this.props}/>\n        }\n    }\n\n    return RedirectComponent\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avaDescription\":\"ProfileItem_avaDescription__2808L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postAll\":\"MyPosts_postAll__oSmsB\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Post_content__1RpGJ\",\"item\":\"Post_item__ihtu9\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\n\n\nexport const ProfileStatusWithHook = (props: any) => {\n\n    let [editMode, setEditMode] = useState<boolean>(false)\n    let [status, setStatus] = useState(props.status)\n    useEffect(() => { ///это для того чтбы при обновлении статуса он не пропадал после двойного клика\n        setStatus(props.status)\n    }, [props.status])\n\n    let activateEditModeTrue = () => {\n        setEditMode(true)\n    }\n    let activateEditModeFalse = () => {\n        setEditMode(false)\n        props.getUpdateUserStatus(status)\n    }\n    let onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n        <div>\n            {!editMode &&\n            <div>\n                <span onDoubleClick={activateEditModeTrue}>{props.status || ' no status '}dd</span>\n            </div>\n            }\n            {editMode &&\n            <div>\n                <input autoFocus={true} onBlur={activateEditModeFalse} value={status} onChange={onStatusChange}></input>\n            </div>\n            }\n        </div>\n    )\n}\n\n\n\n\n","import React from \"react\";\nimport classes from \"./ProfileItem.module.css\";\nimport ToggleIsFetching from \"../../common/ToggleIsFetching\";\n// import ProfileStatus from \"../ProfileInfo/ProfileStatus\";\nimport {getUpdateUserStatus} from \"../../../redux/profile-reducer\";\nimport {ProfileStatusWithHook} from \"../ProfileInfo/ProfileStatusWithHook\";\n\nconst ProfileItem = (props:any) => {\n\n    if (!props.profile){\n        return <ToggleIsFetching/>\n    }\n  return (\n    <div>\n      <div>\n          {/*не удалять*/}\n        {/*<img*/}\n        {/*  className={classes.imgShip}*/}\n        {/*  src=\"https://www.dnvgl.com/Images/Containerships_Excellence_1288x511_tcm8-159022.jpg\"*/}\n        {/*></img>*/}\n\n\n      </div>\n\n      <div className={classes.avaDescription}>\n          <div>FullName: {props.profile.fullName}</div>\n          <img src={props.profile.photos.large}/>\n          <ProfileStatusWithHook status={props.status} getUpdateUserStatus={props.getUpdateUserStatus}/>\n          <div>\n          <span>Contacts: {props.profile.contacts.facebook}</span>\n          <span>Contacts: {props.profile.contacts.github}</span>\n          </div>\n          <div>\n              <p>статус поиска работы: {props.profile.lookingForAJobDescription}</p>\n          </div>\n\n          ava + desription</div>\n    </div>\n  );\n};\nexport default ProfileItem;\n","import React from \"react\";\nimport classes from \"./Post.module.css\";\n\ntype propsType = {\n  message: string;\n  likesCount: number;\n};\n\nconst Post = (props: propsType) => {\n  return (\n    <div className={classes.item}>\n      <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcS4bkPT14o4_n_lnU-3DNyZol1LE0vParolHN-kXQTD8exgO4-8&usqp=CAU\"></img>\n      {props.message}\n\n      <div>\n        <span>{props.likesCount}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Post;\n","import React from \"react\";\nimport classes from \"./MyPosts.module.css\";\nimport Post from \"./Post/Post\";\nimport {InjectedFormProps, Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\n\n\nexport type postsType = {\n    id: number;\n    message: string;\n    countLikes: number;\n};\nexport type propsType = {\n    posts: Array<postsType>;\n    addPost: (newPostText:any) => void\n\n\n};\n\nconst MyPosts = React.memo((props: propsType) => {\n    let newMessagesData = props.posts.map((item:any) => {\n        return <Post message={item.message} likesCount={item.countLikes}/>;\n    });\n\n    const addNewPost = (value:any) => {\n        props.addPost(value.newPostText)\n    }\n\n    return (\n        <div className={classes.postAll}>\n            My posts\n            <MyPostsFormReduxForm onSubmit={addNewPost}/>\n            <div className={classes.posts}>{newMessagesData}</div>\n        </div>\n    );\n});\nconsole.log('my posts')\ntype FormDataType = {\n    newPostText: string\n}\nconst maxLengthCreator10 = maxLengthCreator(10)\nconst MyPostsForm: React.FC<InjectedFormProps<FormDataType>> =React.memo((props) => {\n    return (<form onSubmit={props.handleSubmit}>\n        <div>\n            <div>\n                <Field\n                    placeholder={'post'}\n                    name={'newPostText'}\n                    component={Textarea}\n                    validate={[ required, maxLengthCreator10 ]}\n                ></Field>         \n            </div>\n            <div>\n                <button>Add post</button>\n\n            </div>\n        </div>\n    </form>)\n})\nexport const MyPostsFormReduxForm = reduxForm<FormDataType>({form: 'MyPosts'})(MyPostsForm)\n\n\nexport default MyPosts;\n","import React from \"react\";\nimport {addPostActionCreator, ProfileActionTypes} from \"../../../redux/profile-reducer\";\nimport MyPosts from \"./MyPosts\";\nimport {Store} from \"redux\";\nimport {stateType} from \"../../../redux/state\";\nimport {connect} from \"react-redux\";\n\nexport type postsType = {\n    id: number;\n    message: string;\n    countLikes: number;\n};\nexport type propsType = {\n    store: Store\n};\n\n\n\n\nconst mapStateToProps = (state: stateType) => {\n    return {\n        posts: state.profilePage.posts,\n\n    }\n}\n\nlet mapDispatchToProps = (dispatch: (action: ProfileActionTypes) => void) => {\n    return {\n        addPost: (newPostText:string) => {\n            dispatch(addPostActionCreator(newPostText))\n        },\n    }\n}\nconst MyPostsContainer = connect(mapStateToProps,mapDispatchToProps)(MyPosts)\n\n\nexport default MyPostsContainer;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const MyPostsContainer = () => {\n//     return (\n//         <StoreContext.Consumer>\n//             {(store: Store) => {\n//                 let state = store.getState()\n//\n//                 // let addPost = () => {\n//                 //     store.dispatch(addPostActionCreator())\n//                 // }\n//\n//                 let onChangePost = (text: string) => {\n//                     let action = updateNEwPostTextActionCreator(text);\n//                     store.dispatch(action)\n//                 }\n//                 return <MyPosts\n//                     *******updateNEwPostText={onChangePost}\n//                     *****addPost={addPost}\n//                    ******** posts={state.profilePage.posts}\n//                     newPostText={state.profilePage.newPostText}\n//                 />\n//             }\n//             }\n//         </StoreContext.Consumer>\n//     )\n//\n// }","import React from \"react\";\nimport ProfileItem from \"./ProfileItem/ProfileItem\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\n\n\ntype PropsType = {\n    profile: any\n    status: string\n    getUpdateUserStatus: (status: string) => void\n    isAuth: any\n}\n\n\nconst Profile = React.memo((props: PropsType) => {\n    console.log('profile')\n    return (\n        <div>\n            <ProfileItem profile={props.profile} status={props.status} getUpdateUserStatus={props.getUpdateUserStatus}/>\n            <MyPostsContainer/>\n        </div>\n    );\n});\n\nexport default Profile;\n","import React from \"react\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getUpdateUserStatus, getUserProfile, getUserStatus} from \"../../redux/profile-reducer\";\nimport {withRouter} from \"react-router\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\nclass ProfileContainer extends React.Component<any, any> {\n\n    componentDidMount() {\n\n        let userId = this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n        }\n        // if (!userId){\n        //     this.props.history.push('/login')\n        // }\n        this.props.getUserProfile(userId)\n        // setTimeout(()=>{\n            this.props.getUserStatus(userId)\n        // }, 2000)\n\n    }\nshouldComponentUpdate(nextProps: Readonly<any>, nextState: Readonly<any>, nextContext: any): boolean {\n        return nextProps != this.props || nextState!= this.state\n}\n\n    render() {\n        console.log('profile container')\n        //if (this.props.isAuth === false)return <Redirect to='/login'/>\n\n        return (\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status} getUpdateUserStatus={this.props.getUpdateUserStatus} isAuth={this.props.isAuth}/>\n        )\n    }\n\n\n}\n\n\nlet mapStateToProps = (state: any) => ({\n    profile: state.profilePage.profile,\n    isAuth: state.auth.isAuth,\n    status: state.profilePage.status,\n    authorizedUserId:state.userId\n})\n\n\nexport default compose<React.ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {getUserProfile,getUserStatus,getUpdateUserStatus}),\n    withAuthRedirect,\n)(ProfileContainer)"],"sourceRoot":""}