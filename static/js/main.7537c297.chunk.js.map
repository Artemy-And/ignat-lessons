{"version":3,"sources":["api/api.ts","assets/images/iconmen.png","components/assets/images/loader.svg","components/Navbar/Navbar.module.css","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","utils/object-helpers.ts","redux/user-reducer.tsx","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UserFunc.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Header/Header.tsx","redux/app-reducer.tsx","redux/auth-reducer.tsx","components/Header/HeaderContainer.tsx","components/login/Login.tsx","redux/login-reducer.tsx","redux/redux-store.tsx","components/common/ErrorSnackbar.tsx","redux/state.tsx","components/BestFrieds/BestFriends.tsx","App.tsx","hoc/withSuspence.tsx","index.tsx","components/Users/users.module.css","components/common/ToggleIsFetching.tsx","components/common/FormsControls/FormsControls.tsx","components/common/FormsControls/FormControls.module.css","components/common/Paginator/Paginator.module.css","components/BestFrieds/bestFriends.module.css","utils/validators/validators.ts","redux/profile-reducer.tsx","redux/dialogs-reducer.tsx","App.module.css","components/Header/Header.module.css"],"names":["ResultCodesEnum","instance","axios","create","withCredentials","baseURL","headers","userAPI","getUsers","currentPage","pageSize","get","unFollowUsers","userId","delete","then","response","data","followUsers","post","getProfile","profileAPI","getStatus","updateStatus","status","put","saveProfile","profile","savePhoto","photoFile","formData","FormData","append","securityAPI","getCaptchaUrl","authAPI","me","res","authUsers","login","email","password","rememberMe","captcha","logOut","module","exports","Navbar","className","classes","nav","item","to","activeClassName","active","News","Music","Settings","updateObjectInArray","items","itemId","objPropsName","newObjProps","map","u","initialState","users","totalUsersCount","isFetching","followingInProgress","follow","type","FOLLOW","unFollow","UNFOLLOW","toggleIsFetching","IS_FETCHING","isFollowingInProgress","IS_FOLLOWING_PROGRESS","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_COUNT","usersReducer","state","action","followed","totalCount","filter","id","Paginator","totalItemsCount","onPageChanged","portionSize","pageCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","console","log","styles","myButton","onClick","p","selectPage","e","key","User","props","block","container","src","photos","small","userPhoto","additionalContainer","disabled","some","unFollowThunkCreator","followThunkCreator","info","name","Users","getUsersSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getIsAuth","auth","isAuth","UsersContainer","pageNumber","getUsersTC","this","pageTitle","ToggleIsFetching","React","Component","compose","connect","userID","dispatch","a","resultCode","Success","page","getState","Header","header","icon","faShip","loginBlock","loginOutTC","initialized","error","setAppErrorAC","SET_APP_ERROR","INITIALIZED_SUCCESED","appReducer","captchaUrl","setUserData","SET_USER_DATA","payload","getAuthUserData","getCaptchaUrlTC","captchaURL","url","GET_CAPTCHAURL_SUCCESS","authReducer","HeaderContainer","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Input","validate","required","Login","useSelector","useDispatch","CaptchaIsRequired","message","messages","length","stopSubmit","_error","SET_LOGIN","reducers","combineReducers","profilePage","profileReducer","dialogsPage","dialogsReducer","formReducer","loginPage","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","Alert","elevation","variant","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","_state","posts","countLikes","newPostText","dialogs","newMessageText","subsCribe","observer","rerenderEntireTree","BestFriends","bestFriends","friend","photoFriend","myBestFriends","profileFriend","DialogsContainer","lazy","ProfileContainer","App","catchAllUnhandledErrors","promise","initializeAppTC","addEventListener","removeEventListener","appWrapper","appWrapperContent","exact","path","render","Suspense","fallback","asside","AppContainer","withRouter","Promise","all","SocialTSApp","ReactDOM","document","getElementById","preLoader","Textarea","input","meta","hasError","touched","formControl","value","maxLengthCreator","maxLength","v1","addPostActionCreator","ADD_POST","setStatusUpdate","SET_STATUS_UPDATE","deletePostAC","postId","DELETE_POST","getUserProfile","SET_USER_PROFILE","getUserStatus","SET_STATUS_PROFILE","getUpdateUserStatus","alert","getSavePhotoTC","file","photo","SET_SAVE_PHOTO","getSaveInfoTC","userIds","reject","newPost","addMessageCreator","newMessage","stateCopy"],"mappings":"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","file":"static/js/main.7537c297.chunk.js","sourcesContent":["import axios from \"axios\";\nimport {PhotosType, ProfileType} from \"../redux/profile-reducer\";\nimport {UsersType} from \"../redux/user-reducer\";\n\n\nconst instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {\n        \"API-KEY\": \"53444f05-2fd9-4762-9034-1b37fffb3067\"\n//         \"API-KEY\": \"53444f05-2fd9-4762-9034-1b37fffb30677897987\"\n    }\n})\n\n\nexport const userAPI = {\n    getUsers(currentPage: number, pageSize: number) {\n      let promise = instance.get<ResponseGetUsersType>(`users?page=${currentPage}&count=${pageSize}`)\n        return promise\n            // .then((response: any) => {\n            //     return response.data\n            // });\n    },\n    unFollowUsers(userId: number) {\n        return instance.delete<ResponseUnfollowFollowType>(`follow/${userId}`)//когда хотим отписаться нужен delete\n            .then((response: any) => {\n                return response.data\n            });\n    },\n    followUsers(userId: number) {\n        return instance.post<ResponseUnfollowFollowType>(`follow/${userId}`)//когда хотим отписаться нужен delete\n            .then((response: any) => {\n                return response.data\n            });\n    },\n    getProfile(userId: number) {\n        return instance.get<ProfileType>(`profile/${userId}/`)\n    }\n\n}\n\nexport const profileAPI = {\n    getProfile(userId: any) {\n        return instance.get(`profile/${userId}`)\n    },\n    getStatus(userId: number) {\n        return instance.get(`profile/status/${userId}`)\n    },\n    updateStatus(status: any) {\n        return instance.put('profile/status/', {status: status})\n    },\n    saveProfile(profile: ProfileType) {\n        return instance.put('profile', profile)\n    },\n\n    savePhoto(photoFile: any) {\n        const formData = new FormData();\n        formData.append('image', photoFile)\n\n        return instance.put('profile/photo', formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        })\n    }\n\n}\nexport const securityAPI = {\n    getCaptchaUrl() {\n        return instance.get('security/get-captcha-url')\n    }\n}\n\nexport const authAPI = {\n    me() {\n        return instance.get<ResponseMeType>('auth/me').then(res => res.data)\n    },\n\n    authUsers() {\n        return instance.get(\"auth/me\")\n            .then((response: any) => {\n                return response.data\n            });\n    },\n    login(email: string, password: string, rememberMe: boolean = false, captcha: any = null) {\n        return instance.post<ResponseLoginType>(`auth/login`, {email, password, rememberMe, captcha});\n    },\n    logOut() {\n        return instance.delete(`auth/login`);\n    }\n\n}\n\n// export type AuthMeType = {\n//     email: string\n//     login: string\n//     id: number\n// }\n//\n// type ResponseType<T> = {\n//     data: T\n//     fieldsError?: string[]\n//     messages: string[]\n//     resultCode: ResultCodesEnum\n// }\ntype ResponseGetUsersType = {\n    items: Array<UsersType>\n    totalCount:any\n    error:string\n}\ntype ResponseUnfollowFollowType = {\n    resultCode: ResultCodesEnum\n    messages: Array<string>\n    data:{}\n}\n\ntype ResponseLoginType = {\n    fieldsError?: string[]\n    messages: Array<string>\n    resultCode: ResultCodesEnum\n    data: {\n        userId: number\n    }\n}\ntype ResponseMeType = {\n    data: {\n        email: string\n        login: string\n        id: number\n    }\n    fieldsError?: string[]\n    resultCode: ResultCodesEnum\n    messages: Array<string>\n}\n\n\n// type ResponseGetUsersType = {\n//     data: T\n//     fieldsError: string[]\n//     messages: string[]\n//     resultCode: number\n// }\n\nexport enum ResultCodesEnum {\n    Success = 0,\n    Error = 1,\n    CaptchaIsRequired = 10\n}\n\n\n// export const setLoginAPI = {\n//     authLogin(email:string,password:string){\n//        const promise = instance.post<any>(`auth/login/`,{email},{password})\n//       return promise\n//     },\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n","module.exports = __webpack_public_path__ + \"static/media/iconmen.b3e90dfe.png\";","module.exports = __webpack_public_path__ + \"static/media/loader.79c69891.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2imOE\",\"item\":\"Navbar_item__zmMk4\",\"active\":\"Navbar_active__3mbhk\",\"myBestFriends\":\"Navbar_myBestFriends__rk03E\"};","import React from \"react\";\nimport classes from \"./Navbar.module.css\";\nimport {NavLink} from \"react-router-dom\";\nimport store from \"./../../redux/state\";\n\n\n// // ПОСТАВИЛ КЕЙЙЙПОСТАВИЛ КЕЙЙЙПОСТАВИЛ КЕЙЙЙПОСТАВИЛ КЕЙЙЙПОСТАВИЛ КЕЙЙЙПОСТАВИЛ КЕЙЙЙПОСТАВИЛ КЕЙЙЙПОСТАВИЛ КЕЙЙЙПОСТАВИЛ КЕЙЙЙПОСТАВИЛ КЕЙЙЙ\n// ПОСТАВИЛ КЕЙЙЙПОСТАВИЛ КЕЙЙЙПОСТАВИЛ КЕЙЙЙПОСТАВИЛ КЕЙЙЙ\nconst Navbar = () => {\n\n  return (\n    <nav className={classes.nav}>\n      <div className={classes.item}>\n          <NavLink to=\"/profile\" activeClassName={classes.active}>Profile</NavLink>\n      </div>\n      <div className={classes.item}>\n        <NavLink to =\"/dialogs\" activeClassName={classes.active}>Messages</NavLink>\n      </div>\n        <div className={classes.item}>\n            <NavLink to =\"/users\" activeClassName={classes.active}>Users</NavLink>\n        </div>\n      <div className={classes.item}>\n          <NavLink to =\"/news\" activeClassName={classes.active}>News</NavLink>\n      </div>\n      <div className={classes.item}>\n          <NavLink to =\"/music\" activeClassName={classes.active}>Music</NavLink>\n      </div>\n      <div className={classes.item}>\n          <NavLink to =\"settings\" activeClassName={classes.active}>Settings</NavLink>\n      </div>\n\n\n\n\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\n\n\n\nconst News= () => {\n         return(\n        <p>CHECK News</p>\n    )\n}\n\nexport default News","import React from \"react\";\n\n\n\nconst Music= () => {\n         return(\n        <p>CHECK Music</p>\n    )\n}\n\nexport default Music","import React from \"react\";\n\n\n\nconst Settings= () => {\n         return <p>Check settings</p>\n}\n\nexport default Settings\n\n","export let updateObjectInArray =(items:any,itemId:any, objPropsName:string,newObjProps:any )=>{\n    return items.map((u:any) => {\n        if (u[objPropsName] === itemId) {\n            return {...u, ...newObjProps}\n        }\n        return u\n    })\n}","import {ResultCodesEnum, userAPI} from \"../api/api\";\nimport {updateObjectInArray} from \"../utils/object-helpers\";\nimport {PhotosType} from \"./profile-reducer\";\nimport {AppRootStateType} from \"./redux-store\";\nimport {Dispatch} from \"react\";\n\nlet initialState = {\n    users: [],\n    pageSize: 10,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: false,\n    followingInProgress: [2, 3]\n}\n\n\nfunction usersReducer(state: UsersTypeAll = initialState, action: UserActionTypes): UsersTypeAll {\n    switch (action.type) {\n        case FOLLOW:\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\n            }\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\n            }\n        case SET_USERS:\n            return {...state, users: action.users}//взять старый стей и пользовтелей которые там были и перезатеретт весь массив\n        case SET_CURRENT_PAGE: {\n            return {...state, currentPage: action.currentPage}\n        }\n        case SET_TOTAL_COUNT: {\n            return {...state, totalUsersCount: action.totalCount}\n        }\n        case IS_FETCHING: {\n            return {...state, isFetching: action.isFetching}\n        }\n        case IS_FOLLOWING_PROGRESS: {\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id != action.userId)\n            }\n        }\n        default:\n            return state\n    }\n\n\n}\n\n\n///////////*********ACTIONS**********//////////\n\nexport const follow = (userId: number | null): FollowActionCreatorType => ({type: FOLLOW, userId})\n\nexport const unFollow = (userId: number | null): UnFollowActionCreatorType => ({type: UNFOLLOW, userId})\nexport const setUsers = (users: Array<UsersType>): setUsetACType => ({type: SET_USERS, users})\nexport const setCurrentPage = (currentPage: number): setCurrentPageACType => ({\n    type: SET_CURRENT_PAGE, currentPage: currentPage\n})\nexport const setTotalUsersCount = (totalCount: number): setTotalCountACType => ({\n    type: SET_TOTAL_COUNT, totalCount: totalCount\n})\nexport const toggleIsFetching = (isFetching: boolean): isFetchingACType => ({\n    type: IS_FETCHING, isFetching: isFetching\n})\nexport const isFollowingInProgress = (isFetching: boolean, userId: number): isFollowingInProgressType => ({\n    type: IS_FOLLOWING_PROGRESS, isFetching: isFetching, userId: userId\n})\n\n///////////*********THUNK**********//////////\n\nexport const getUsersTC = (page: number, pageSize: number) => {\n    return async (dispatch: Dispatch<UserActionTypes>, getState: () => AppRootStateType) => {\n        dispatch(toggleIsFetching(true))\n        dispatch(setCurrentPage(page))\n        let data = await userAPI.getUsers(page, pageSize)\n        dispatch(toggleIsFetching(false))\n        dispatch(setUsers(data.data.items))\n        dispatch(setTotalUsersCount(data.data.totalCount))\n\n    }\n}\n\nexport const unFollowThunkCreator = (userID: number) => {\n    return async (dispatch: Dispatch<UserActionTypes>) => {\n        dispatch(isFollowingInProgress(true, userID))\n        let data = await userAPI.unFollowUsers(userID)\n        if (data.resultCode === ResultCodesEnum.Success) {\n            dispatch(unFollow(userID))\n        }\n        dispatch(isFollowingInProgress(false, userID))\n\n    }\n}\nexport const followThunkCreator = (userID: number) => {\n    return async (dispatch: Dispatch<UserActionTypes>) => {\n        dispatch(isFollowingInProgress(true, userID))\n        let data = await userAPI.followUsers(userID)\n        if (data.resultCode === 0) {\n            dispatch(follow(userID))\n        }\n        dispatch(isFollowingInProgress(false, userID))\n\n    }\n}\n\n///////////*********TYPES**********//////////\n\ntype LocationType = {\n    city: string\n    country: string\n}\nexport type UsersType = {\n    id: number\n    name: string\n    status: string\n    photos: PhotosType\n    followed: boolean\n    location: LocationType\n}\nexport type UsersTypeAll = {\n    users: Array<UsersType>\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    isFetching: boolean\n    followingInProgress: Array<number>\n}\n\n\nexport type UserActionTypes =\n    FollowActionCreatorType\n    | UnFollowActionCreatorType\n    | setUsetACType\n    | setCurrentPageACType\n    | setTotalCountACType\n    | isFetchingACType\n    | isFollowingInProgressType\n\n\ntype isFollowingInProgressType = {\n    type: typeof IS_FOLLOWING_PROGRESS\n    isFetching: boolean\n    userId: number\n}\ntype isFetchingACType = {\n    type: typeof IS_FETCHING\n    isFetching: boolean\n}\n\ntype setTotalCountACType = {\n    type: typeof SET_TOTAL_COUNT\n    totalCount: number\n}\n\ntype setCurrentPageACType = {\n    type: typeof SET_CURRENT_PAGE\n    currentPage: any\n}\ntype FollowActionCreatorType = {\n    type: typeof FOLLOW\n    userId: any\n}\ntype UnFollowActionCreatorType = {\n    type: typeof UNFOLLOW\n    userId: any\n\n}\ntype setUsetACType = {\n    type: typeof SET_USERS\n    users: Array<UsersType>\n\n}\nconst UNFOLLOW = \"UNFOLLOW\"\nconst FOLLOW = \"FOLLOW_UP\"\nconst SET_USERS = \"SET_USERS\"\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\"\nconst SET_TOTAL_COUNT = \"SET_TOTAL_COUNT\"\nconst IS_FETCHING = \"IS_FETCHING\"\nconst IS_FOLLOWING_PROGRESS = \"IS_FOLLOWING_PROGRESS\"\n\n\nexport default usersReducer","import React, {useState} from \"react\";\nimport styles from \"./Paginator.module.css\"\n\n\ntype paginatorType = {\n    pageSize: number\n    currentPage: number\n    totalItemsCount: number\n    onPageChanged: (p: number) => void\n    portionSize?: number\n    // setCurrentPage:Function\n}\n\n\nexport const Paginator = ({pageSize, currentPage, totalItemsCount, onPageChanged, portionSize = 10}: paginatorType) => {\n\n    let pageCount = Math.ceil(totalItemsCount / pageSize);\n    let pages = []\n    for (let i = 1; i <= pageCount; i++) {\n        pages.push(i)\n    }\n    //ниже получили сколбко всего будет страниц, так как задали размер одной страницы 10 users\n    let portionCount = Math.ceil(pageCount / portionSize)\n\n    let [portionNumber, setPortionNumber] = useState<number>(1)\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\n    let rightPortionPageNumber = portionNumber * portionSize\n    console.log(portionCount)\n    // console.log(portionNumber)\n    return (\n        <div>{portionNumber > 1 && <button className={styles.myButton} onClick={() => setPortionNumber(portionNumber - 1)}>prev</button>}\n            {pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\n                .map(p => {\n                    return <span\n                        className={currentPage === p ? styles.selectPage : styles.pages }\n                        onClick={(e) => {\n                            onPageChanged(p)\n                        }}\n                        key={p}>\n                    {p}</span>\n                })\n            }\n            {portionCount > portionNumber && <button className={styles.myButton} onClick={() => setPortionNumber(portionNumber + 1)}>Next</button>}\n\n        </div>\n    )\n}","import React from \"react\";\nimport styles from \"./users.module.css\";\nimport userPhoto from \"../../assets/images/iconmen.png\";\nimport {NavLink} from \"react-router-dom\";\nimport {UsersType} from \"../../redux/user-reducer\";\n\n\ntype usersTypeComponent = {\n    users: UsersType\n    followingInProgress: Array<number>\n    unFollowThunkCreator: (userID: number) => void\n    followThunkCreator: (userID: number) => void\n}\n\n\nexport const User = (props: usersTypeComponent) => {\nlet u = props.users\n\n    return (\n        <div className={styles.block}>\n            <span>\n                <div className={styles.container}>\n                    <NavLink to={'/profile/' + u.id}>\n                    <img src={u.photos.small != null ? u.photos.small : userPhoto} className={styles.userPhoto}/>\n                    </NavLink>\n                </div>\n                <div className={styles.additionalContainer}>\n                    {u.followed ?\n                        <button className={styles.myButton} disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {\n                            props.unFollowThunkCreator(u.id)\n                        }}>Unfollow</button>\n                        :\n                        <button className={styles.myButton} disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {\n                            props.followThunkCreator(u.id)\n                        }}>Follow</button>\n                    }\n\n                </div>\n            </span>\n            <div className={styles.info}>\n                  <span>\n                <span>\n                    <div><b>Nickname</b>: {u.name}</div>\n                    <br></br>\n                    <div><b>Location</b>:{u.status}</div>\n                </span>\n                <span>\n                         <div>{'u.location.country'}</div>\n                    <div>{'u.location.city'}</div>\n\n                </span>\n            </span>\n            </div>\n\n\n        </div>\n    )\n\n\n}","import React from \"react\";\nimport {Paginator} from \"../common/Paginator/Paginator\";\nimport {User} from \"./User\";\nimport {UsersType} from \"../../redux/user-reducer\";\n\n\n\ntype usersTypeForComponent = {\n    pageSize: number\n    currentPage: number\n    users: Array<UsersType>\n    totalUsersCount: number\n    onPageChanged: (p: number) => void\n    unFollow: (userId: any) => void\n    follow: (userId: any) => void\n    name: string\n    status: any\n    followingInProgress: Array<number>\n    unFollowThunkCreator:(userID:number)=>void\n    followThunkCreator:(userID:number)=>void\n}\n\n\n\nfunction solve(s: any) {\n    let upper = s.split('').filter((x: any) => x === x.toUpperCase()).length\n    let lower = s.split('').filter((x: any) => x === x.toLowerCase()).length\n    console.log(upper)\n    console.log(lower)\n    return lower > upper || lower == upper ? s.toLowerCase() : s.toUpperCase()\n\n}\n\n\n\nexport const Users = (props: usersTypeForComponent) => {\n\n\n    return (\n        <div>\n\n\n            {\n                props.users.map((u: any) => <User users={u}\n                                                  followingInProgress={props.followingInProgress}\n                                                  followThunkCreator={props.followThunkCreator}\n                                                  unFollowThunkCreator={props.unFollowThunkCreator}\n                                                  key={u.id}/>\n\n\n                )}\n            <Paginator pageSize={props.pageSize}\n                       currentPage={props.currentPage}\n                       onPageChanged={props.onPageChanged}\n                       totalItemsCount={props.totalUsersCount}\n            />\n        </div>)\n\n}","import {AppRootStateType} from \"./redux-store\";\n\nexport const getUsersSelector = (state: AppRootStateType) => {\n    return state.usersPage.users\n}\n\nexport const getPageSize = (state: AppRootStateType) => {\n    return state.usersPage.pageSize\n}\n\nexport const getTotalUsersCount = (state: AppRootStateType) => {\n    return state.usersPage.totalUsersCount\n}\n\nexport const getCurrentPage = (state: AppRootStateType) => {\n    return state.usersPage.currentPage\n}\nexport const getIsFetching = (state: AppRootStateType) => {\n    return state.usersPage.isFetching\n}\nexport const getFollowingInProgress = (state: AppRootStateType) => {\n    return state.usersPage.followingInProgress\n}\n\nexport const getIsAuth = (state: AppRootStateType) => {\n    return state.auth.isAuth\n}","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {\n    follow, followThunkCreator, getUsersTC, setCurrentPage,\n    unFollow, unFollowThunkCreator, UsersType\n} from \"../../redux/user-reducer\";\nimport {Users} from \"./UserFunc\";\nimport ToggleIsFetching from \"../common/ToggleIsFetching\";\n\nimport {compose} from \"redux\";\nimport {\n    getCurrentPage, getFollowingInProgress, getIsAuth,\n    getIsFetching,\n    getPageSize,\n    getTotalUsersCount,\n    getUsersSelector\n} from \"../../redux/users-selectors\";\nimport {AppRootStateType} from \"../../redux/redux-store\";\n\n\ntype MapStatePropsType = {\n    currentPage: number\n    pageSize: number\n    isFetching: boolean\n    users: Array<UsersType>\n    totalUsersCount: number\n    followingInProgress: Array<number>\n}\n\ntype MapDispatchToPropsType = {\n    getUsersTC: (currentPage: number, pageSize: number) => void\n    follow: (userId: any) => void\n    unFollow: (userId: any) => void\n    followThunkCreator: (userID: number) => void\n    unFollowThunkCreator: (userID: number) => void\n}\n\ntype OwnPropsType = {\n    pageTitle: string\n    name: string\n    status: any\n}\n\ntype PropsType = OwnPropsType & MapDispatchToPropsType & MapStatePropsType\n\n\nexport class UsersContainer extends React.Component<PropsType, any> {\n    componentDidMount() {\n        this.props.getUsersTC(this.props.currentPage, this.props.pageSize)\n    }\n\n    onPageChanged = (pageNumber: any) => {\n        this.props.getUsersTC(pageNumber, this.props.pageSize)\n    }\n\n    render() {\n\n        return <>\n            <h2>{this.props.pageTitle}</h2>\n            {this.props.isFetching ? <ToggleIsFetching/> : null}\n            <Users pageSize={this.props.pageSize}\n                   currentPage={this.props.currentPage}\n                   name={this.props.name}\n                   users={this.props.users}\n                   follow={this.props.follow}\n                   onPageChanged={this.onPageChanged}\n                   status={this.props.status}\n                   totalUsersCount={this.props.totalUsersCount}\n                   unFollow={this.props.unFollow}\n                   followingInProgress={this.props.followingInProgress}\n                   followThunkCreator={this.props.followThunkCreator}\n                   unFollowThunkCreator={this.props.unFollowThunkCreator}\n\n\n            />\n        </>\n\n    }\n}\n\n\nlet mapStateToProps = (state: AppRootStateType) => {//в нашем первом объекте мы берем данные из STATE, смысл этой функции замапить стейт на пропсы и превратить чать стейта в пропсы\n    return {\n        users: getUsersSelector(state),\n        pageSize: getPageSize(state),\n        totalUsersCount: getTotalUsersCount(state),\n        currentPage: getCurrentPage(state),\n        isFetching: getIsFetching(state),\n        followingInProgress: getFollowingInProgress(state),\n        isAuth: getIsAuth(state)\n\n    }\n}\n\n\nexport default compose<React.ComponentType<any>>(\n    connect<MapStatePropsType, MapDispatchToPropsType, OwnPropsType, AppRootStateType>(\n        mapStateToProps, {\n        follow,\n        unFollow,\n        // setCurrentPage,\n        followThunkCreator,\n        unFollowThunkCreator,\n        getUsersTC\n    }),\n    // withAut hRedirect\n)(UsersContainer)","import React from \"react\";\nimport classes from \"./Header.module.css\";\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faShip} from '@fortawesome/free-solid-svg-icons'\nimport {NavLink} from \"react-router-dom\";\n\n// let test1 = \"header\";\n// let test2 = \"active\";\n// let classNew = `${classes.header} ${classes.active}`;это двойной класс его можно использовать\n\nconst Header = (props: any) => {\n\n    return (\n        <header className={classes.header}>\n            <FontAwesomeIcon icon={faShip} className={classes.icon}/>\n            {/*<img src = \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQ2sOdNTUYrgWYsUwe8LF1FJ4-XXbBp9lLlfzKppSe2oOFumoLz&usqp=CAU\"></img>*/}\n            {/*<img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRbcaKdblglmQe9isNHnTB-6YwznE-rKTELEcyGQom6pck_eHpV&usqp=CAU\"></img>*/}\n            <div className={classes.loginBlock}>\n                {props.isAuth ? <div>{props.login} - <button onClick={props.loginOutTC}>LogOut</button> </div> : <NavLink to={\"/login\"}>Login</NavLink>}\n\n            </div>\n        </header>\n    );\n};\n\nexport default Header;\n","import {Dispatch} from \"redux\";\nimport {getAuthUserData} from \"./auth-reducer\";\n\n\nlet initialState = {\n    initialized: false,\n    error:null\n}\n\nfunction appReducer(state: InitialStateType = initialState, action: ActionsTypes): InitialStateType {\n    switch (action.type) {\n        case INITIALIZED_SUCCESED:\n            return {\n                ...state,\n                initialized: true,\n            }\n        case SET_APP_ERROR:\n            return {...state,error:action.error}\n        default:\n            return state\n    }\n}\n\n///////////*********ACTIONS**********//////////\nexport const setInitialisedSuccess = (): SetInitialisedType => ({type: INITIALIZED_SUCCESED})\nexport const setAppErrorAC = (error: string | null): SetAppErrorACType => ({type: SET_APP_ERROR, error})\n\n\n///////////*********THUNK**********//////////\nexport const initializeAppTC = () => (dispatch: Dispatch<any>) => {\n    let promise = dispatch(getAuthUserData())\n    Promise.all([promise])\n        .then(() => {\n            dispatch(setInitialisedSuccess());\n        });\n}\n\n///////////*********TYPES**********//////////\n\nexport type ResponseType<D = {}> = {//если D не передавать то он будет путым объектом\n    resultCode: number\n    messages: Array<string>\n    data: D\n}\n\n\n\n\n\n\ntype ActionsTypes = SetAppErrorACType | SetInitialisedType\n\nconst INITIALIZED_SUCCESED = \"INITIALIZED_SUCCESED\"\nconst SET_APP_ERROR = \"SET_APP_ERROR\"\n\n\nexport type InitialStateType = {\n    initialized: boolean\n    error:string | null\n}\n\ntype SetAppErrorACType = {\n    type: typeof SET_APP_ERROR\n    error: string | null\n}\ntype SetInitialisedType = {\n    type: typeof INITIALIZED_SUCCESED\n}\n\n\nexport default appReducer","import {authAPI, ResultCodesEnum, securityAPI} from \"../api/api\";\nimport {Dispatch} from \"redux\";\nimport {stopSubmit} from \"redux-form\";\nimport {setAppErrorAC} from \"./app-reducer\";\n\n\nlet initialState = {\n    userId: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    captchaUrl:null\n}\n\n\nfunction authReducer(state: authType = initialState, action: UserActionTypes): authType {\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state,\n                ...action.payload,\n\n            }\n        case GET_CAPTCHAURL_SUCCESS:\n            return {\n                // ...state,captchaUrl:action.payload\n                ...state,\n                ...action.payload,\n            }\n\n        default:\n            return state\n    }\n\n\n}\n///////////*********ACTIONS**********//////////\nexport const setUserData = (userId: any, email: any, login: any, isAuth: any): setUserDataType => ({\n    type: SET_USER_DATA,\n    payload: {userId, email, login, isAuth}\n})\nexport const getCaptchaUrlAC = (captchaUrl:any): getCaptchaURLACType => ({\n    type: GET_CAPTCHAURL_SUCCESS,\n    payload: {captchaUrl}\n})\n\nexport const getAuthUserData = () => async (dispatch: Dispatch<UserActionTypes>) => {\n    let response = await authAPI.me();\n    if (response.resultCode === ResultCodesEnum.Success) {\n        let {id, email, login} = response.data\n        dispatch(setUserData(id, email, login, true))\n    }\n\n}\n///////////*********THUNK**********//////////\nexport const loginTC = (email: string, password: string, rememberMe: boolean,captcha:any) => async (dispatch: Dispatch<any>) => {\n    // dispatch(stopSubmit('login',{_error:'asdas'}));\n    let res = await authAPI.login(email, password, rememberMe,captcha)\n    if (res.data.resultCode === ResultCodesEnum.Success) {\n        dispatch(getAuthUserData())\n        // let message = res.data.messages\n        //     // [0]\n        // dispatch(setAppErrorAC(message))\n    } else {\n        if (res.data.resultCode === ResultCodesEnum.CaptchaIsRequired){\n            dispatch(getCaptchaUrlTC())\n        }\n        let message = res.data.messages.length > 0 ? res.data.messages[0] : \"Some error\"\n        dispatch(stopSubmit('login', {_error: message}));\n        dispatch(setAppErrorAC(message))\n\n    }\n\n\n}\nexport const loginOutTC = () => async (dispatch: Dispatch<any>) => {\n    let res = await authAPI.logOut()\n            if (res.data.resultCode === 0) {\n                dispatch(setUserData(null, null, null, false))\n            }\n}\n\nexport const getCaptchaUrlTC = () => async (dispatch: Dispatch<any>) => {\n    let res = await securityAPI.getCaptchaUrl()\n    const captchaURL =  res.data.url\n                dispatch(getCaptchaUrlAC(captchaURL))\n            }\n\n///////////*********TYPES**********//////////\nconst SET_USER_DATA = \"social-network/auth/SET_USER_DATA\"\nconst GET_CAPTCHAURL_SUCCESS = \"social-network/auth/GET_CAPTCHAURL_SUCCESS\"\n\n\nexport type authType = {\n    userId: any\n    email: any\n    login: any\n    isAuth: boolean\n    captchaUrl:any\n}\nexport type dataType = {\n    userId: string\n    email: string\n    login: string\n    isAuth: boolean\n    captcha?:any\n}\n\n\ntype getAuthUserDataType = { getAuthUserData: () => void }\n\n\nexport type UserActionTypes = setUserDataType|getCaptchaURLACType\n\n\ntype getCaptchaURLACType = {\n    type: typeof GET_CAPTCHAURL_SUCCESS\n    payload: any\n    // userId:any,\n    // email:any,\n    // login:any,\n    // isAuth:any\n}\ntype setUserDataType = {\n    type: typeof SET_USER_DATA\n    payload: dataType\n    // userId:any,\n    // email:any,\n    // login:any,\n    // isAuth:any\n}\n\n\nexport default authReducer","import React from \"react\";\nimport Header from \"./Header\";\nimport {connect} from \"react-redux\";\nimport {getAuthUserData, loginOutTC} from \"../../redux/auth-reducer\";\nimport {Redirect} from \"react-router-dom\";\n\n\ntype PropsType = {\n    setUserData: (data: any) => void\n    getAuthUserData:any\n}\n\nclass HeaderContainer extends React.Component<any, any> {\n    componentDidMount() {\n        this.props.getAuthUserData()\n        // userAPI.authUsers().then((data: any) => {\n        //     if (data.resultCode === 0) {\n        //         let {id, email, login} = data.data\n        //         this.props.setUserData({id, email, login})\n        //     }\n        // });\n    }\n\n    render() {\n\n        return (\n            <Header {...this.props}/>\n        );\n    }\n};\nconst mapStateToProps = (state: any) => ({\n    isAuth: state.auth.isAuth,\n    login: state.auth.login\n})\n\n\nexport default connect(mapStateToProps, {getAuthUserData,loginOutTC})(HeaderContainer);\n","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Input} from \"../common/FormsControls/FormsControls\";\nimport {required} from \"../../utils/validators/validators\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {loginTC} from \"../../redux/auth-reducer\";\nimport {Redirect} from \"react-router\";\nimport {AppRootStateType} from \"../../redux/redux-store\";\n\n\n\n\nconst LoginForm: React.FC<InjectedFormProps<FormDataType, LoginFormOwnProps> & LoginFormOwnProps> = (props: LoginFormDataType) => {\n\n    console.log(props.captchaUrl)\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder={'Email'} name={'email'} component={Input} validate={[required]}/>\n            </div>\n            <div>\n                <Field placeholder={'Password'} name={'password'} type={'password'} validate={[required]}\n                       component={Input}/>\n            </div>\n            <div>\n                <Field component={Input} name={'rememberMe'} type={'checkbox'}/> remember me\n            </div>\n            {props.captchaUrl && <img src={props.captchaUrl}/>}\n            {props.captchaUrl && <div>\n                <Field placeholder={'symbols from image'} name={'captcha'} validate={[required]}\n                       component={Input}/> remember me\n            </div>}\n\n\n            {/*{props.error && <div className={style.formSummaryError}>*/}\n            {/*    {props.error}*/}\n            {/*</div>}*/}\n\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    )\n}\n\nconst LoginReduxForm = reduxForm<FormDataType,LoginFormOwnProps>({form: 'login'})(LoginForm)\n\n\nexport const Login = () => {\n    const isAuth = useSelector<AppRootStateType, any>((state) => state.auth.isAuth)\n    const captchaUrl = useSelector<AppRootStateType, any>(state => state.auth.captchaUrl)\n    const dispatch = useDispatch();\n\n    const onSubmit = (formData: FormDataType) => {\n\n        dispatch(loginTC(formData.email, formData.password, formData.rememberMe, formData.captcha))\n    }\n    if (isAuth) {\n        return <Redirect to={'/profile'}/>\n    }\n    return (<div>\n            <h1>LOGIN</h1>\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\n        </div>\n\n    )\n}\ntype LoginFormDataType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n    // captcha?:any\n    handleSubmit?: () => void\n    captchaUrl?: string | null\n}\ntype LoginFormOwnProps = {\n    captchaUrl: string | null\n}\ntype FormDataType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha: string | null\n}\n\n\n\n","import React from \"react\";\n\n\n\nlet initialState: initialStateType = {\n    login: \"\",\n    password: 1\n}\n\nexport function loginReducer(state: initialStateType = initialState, action: setLoginACType): initialStateType {\n    switch (action.type) {\n\n        case SET_LOGIN: {\n            return {\n                ...state, login: action.login,\n                password: action.password\n            }\n        }\n\n\n        default:\n            return state\n    }\n\n\n}\n///////////*********ACTIONS**********//////////\nexport const setLoginAC = (login: string, password: string): setLoginACType => ({\n    type: SET_LOGIN, login, password\n})\n\n///////////*********TYPES**********//////////\nconst SET_LOGIN = \"SET_LOGIN\"\n\ntype initialStateType = {\n    login: string\n    password: any\n}\ntype setLoginACType = {\n    type: typeof SET_LOGIN\n    login: string\n    password: any\n}\n\n// export const setLoginToAuth=(login:string,password:string)=>(dispatch:any)=>{\n//     setLoginAPI.authLogin(login,password)\n//         .then((response:any)=>{\n//             // if (response.data.resultCode === 0){\n//                 dispatch(setLoginAC(response.login,response.password))\n//             // }\n//\n//         })\n// }\n","import {applyMiddleware, combineReducers, createStore,compose} from \"redux\";\nimport profileReducer from \"./profile-reducer\";\nimport dialogsReducer from \"./dialogs-reducer\";\nimport usersReducer from \"./user-reducer\";\nimport authReducer from \"./auth-reducer\";\n// import thunkMiddleware from \"react-redux-typescript\"\n// import thunkMiddleware from \"react-redux\"\nimport thunkMiddleware from \"redux-thunk\"\nimport {reducer as formReducer} from 'redux-form'\nimport {loginReducer} from \"./login-reducer\";\nimport appReducer from \"./app-reducer\";\n\n\nlet reducers = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    usersPage:usersReducer,\n    auth:authReducer,\n    form:formReducer,\n    loginPage:loginReducer,\n    app:appReducer\n})\n\n// import { createStore, applyMiddleware, compose } from 'redux';\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store= createStore(reducers, /* preloadedState, */ composeEnhancers(applyMiddleware(thunkMiddleware)\n));\n\n// let store = createStore(reducers,applyMiddleware(thunkMiddleware))\nexport type AppRootStateType = ReturnType<typeof reducers>\n// @ts-ignore\nwindow.store = store;\n\nexport default store","import React from 'react';\n\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../redux/redux-store\";\nimport {setAppErrorAC} from \"../../redux/app-reducer\";\n// import {AppRootStateType} from \"../../app/store\";\n// import {setAppErrorAC} from \"../../app/app-reducer\";\n\n\nfunction Alert(props: any) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\n\nexport function ErrorSnackbar() {\n\n\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\n   const dispatch = useDispatch()\n\n    const handleClick = () => {\n        //setOpen(true);\n    };\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        dispatch(setAppErrorAC(null))\n\n    };\n\n    const isOpen = error !== null\n\n    return (\n        <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\n            <Alert onClose={handleClose}>{error}</Alert>\n        </Snackbar>\n\n\n    );\n}","import React from \"react\";\nimport profileReducer from \"./profile-reducer\";\nimport dialogsReducer from \"./dialogs-reducer\";\n// import {postsType} from \"./../components/Profile/MyPosts/MyPosts\";\n// import {\n//     dialogsDataType,\n//     dialogsMessagesDataType,\n// } from \"./../components/Dialogs/Dialogs\";\n\n\n// const UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\"\n// const ADD_POST = \"ADD-POST\"\n// const UPDATE_NEW_MESSAGE_TEXT =\"UPDATE-NEW-MESSAGE-TEXT\"\n// const ADD_MESSAGE =\"ADD-MESSAGE\"\n// export type stateTypeFirst = {\n//     _state: stateType\n//     getState: () => stateType\n//     rerenderEntireTree: (state: any) => void\n//     subsCribe: (observer: any) => void\n//     dispatch: (action: any) => void///КАКОЙ ТИп\n// }\n// export type postsTypeState = {\n//     posts: Array<postsType>\n//\n//     profile:any\n//     status:string\n// }\n//\n// export type dialogsTypeState = {\n//     dialogs: Array<dialogsDataType>\n//     messages: Array<dialogsMessagesDataType>\n//     newMessageText:string\n// }\n// export type stateType = {\n//     profilePage: postsTypeState\n//     dialogsPage: dialogsTypeState\n//     auth:any\n// }\n\n// let store: stateTypeFirst = {\nlet store: any = {\n    _state: {\n        profilePage: {\n            posts: [\n                {id: 1, message: \"Hi, how are you?\", countLikes: 10},\n                {id: 2, message: \"Hi, how are you?\", countLikes: 133},\n                {id: 3, message: \"Hi, how are you?\", countLikes: 4432},\n            ],\n            newPostText: 'it-kamasutra',\n            profile:null\n        },\n        dialogsPage: {\n            dialogs: [\n                {id: 1, name: \"Artemy\"},\n                {id: 2, name: \"Alevtina\"},\n                {id: 3, name: \"Akseniya\"},\n                {id: 4, name: \"Afonasii\"},\n                {id: 5, name: \"Belanton\"},\n                {id: 6, name: \"Stephan\"},\n                {id: 7, name: \"Stephan\"},\n                {id: 8, name: \"Stephan\"},\n                {id: 9, name: \"Stephan\"},\n            ],\n            messages: [\n                {id: 1, message: \"Halllooo?\"},\n                // { id: 2, message: \"Hey how are you?\" },\n                // { id: 3, message: \"Hey how are you?\" },\n\n            ],\n            newMessageText: \"\"\n        }\n    },\n    getState() {\n        return this._state;\n    },\n    subsCribe(observer: any) {\n        this.rerenderEntireTree = observer\n    },\n    rerenderEntireTree(state: any) {\n        console.log('state changed')\n    },\n    dispatch(action:any) {\n        this._state.profilePage = profileReducer(this._state.profilePage, action)\n        this._state.dialogsPage = dialogsReducer(this._state.dialogsPage, action)\n        this.rerenderEntireTree(this._state)\n    }\n}\n\n\nexport default store;\n","import React from \"react\";\nimport classes from \"./bestFriends.module.css\";\nimport store from \"./../../redux/state\";\n\n\nconst BestFriends = () => {\n    const bestFriends = store._state.dialogsPage.dialogs.map((friend: any) => {\n        return <div  className={classes.container} key={friend.id}>\n            <br></br>\n            <img className={classes.photoFriend}\n                src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcS4bkPT14o4_n_lnU-3DNyZol1LE0vParolHN-kXQTD8exgO4-8&usqp=CAU\"></img>\n            {friend.name}\n\n        </div>;\n    })\n    return (\n        <div className={classes.myBestFriends}>\n\n            <span className={classes.profileFriend}>           {bestFriends}</span>\n        </div>\n\n    );\n};\n\nexport default BestFriends;\n","import React from \"react\";\nimport styles from \"./App.module.css\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport {HashRouter, Route, withRouter} from \"react-router-dom\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport {Login} from \"./components/login/Login\";\nimport {compose} from \"redux\";\nimport {connect, Provider} from \"react-redux\";\nimport {setAppErrorAC, initializeAppTC} from \"./redux/app-reducer\";\nimport ToggleIsFetching from \"./components/common/ToggleIsFetching\";\nimport store from \"./redux/redux-store\";\nimport {withSuspence} from \"./hoc/withSuspence\";\nimport {ErrorSnackbar} from \"./components/common/ErrorSnackbar\";\nimport BestFriends from \"./components/BestFrieds/BestFriends\";\n\n\n\n// Этот компонент загружается динамически\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\n// import ProfileContainer from \"./components/Profile/ProfileContainer\";\n// import DialogsContainer from \"./components/Dialogs/DialogsContainer\";\n\n\nclass App extends React.Component<any, any> {\n//необходимо задиспачить тут ошибку которую нужно создать в app reducer 47 минута\n    catchAllUnhandledErrors = (reason: any, promise: any) => {\n        this.props.setAppErrorAC(\"error\")\n        console.log(this.props.error)\n    }\n\n    componentDidMount() {\n        this.props.initializeAppTC()\n\n\n        // @ts-ignore\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\n    }\n\n    componentWillUnmount() {\n        // @ts-ignore\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors)\n\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <ToggleIsFetching/>\n        }\n        return (\n\n            <div className={styles.appWrapper}>\n                {this.props.error !== \" \" && <ErrorSnackbar/>}\n\n                <HeaderContainer/>\n                <Navbar/>\n                <div className={styles.appWrapperContent}>\n                    <Route\n                        exact\n                        path=\"/dialogs\"\n                        //вариант загрузки DialogsComponent с HOC withSuspence\n                        render={withSuspence(DialogsContainer)}\n                    />\n\n                    <Route\n                        path='/profile/:userId?'\n                        render={() =>\n                            //вариант загрузки DialogsComponent без HOC withSuspence\n                            <React.Suspense fallback={<ToggleIsFetching/>}>\n                                <div>\n                                    <ProfileContainer/>\n                                </div>\n                            </React.Suspense>\n                        }\n                    />\n                    <Route path=\"/users\" render={() => <UsersContainer pageTitle={'Logists'}/>}/>\n                    <Route path=\"/login\" render={() => <Login/>}/>\n\n                    <Route path=\"/news\" component={News}/>\n                    <Route path=\"/music\" component={Music}/>\n                    <Route path=\"/settings\" component={Settings}/>\n\n\n                </div>\n                {/*<Navbar/>*/}\n                <div className={styles.asside} >\n<BestFriends/>\n                </div>\n            </div>\n\n\n        );\n    }\n}\n\nconst mapStateToProps = (state: any) => ({\n    initialized: state.app.initialized,\n    error:state.app.error\n})\n\nexport let AppContainer = compose<React.ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {initializeAppTC,setAppErrorAC}))(App);\n\nexport const SocialTSApp = (props: any) => {\n    return (<HashRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </HashRouter>)\n}\n\n","import React from \"react\";\nimport ToggleIsFetching from \"../components/common/ToggleIsFetching\";\n\n\nexport const withSuspence = (Component: any) => {\n\n    return (props: any) => {\n\n    return <React.Suspense fallback={<ToggleIsFetching/>}>\n        <div>\n            <Component {...props}/>\n        </div>\n    </React.Suspense>\n}\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {SocialTSApp} from \"./App\";\n\n// import store from \"./redux/redux-store\"\n// import {BrowserRouter} from \"react-router-dom\";\n// import {Provider} from \"react-redux\";\n\n\n\nReactDOM.render(\n  <SocialTSApp/>, document.getElementById(\"root\"));\n\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"users_block__1q7CS\",\"container\":\"users_container__kltFs\",\"userPhoto\":\"users_userPhoto__1_En6\",\"additionalContainer\":\"users_additionalContainer__fEwbA\",\"info\":\"users_info__2HJ7N\",\"selectPage\":\"users_selectPage__3t1bg\",\"myButton\":\"users_myButton__4DWBX\"};","import React from \"react\";\nimport preLoader from \"../assets/images/loader.svg\";\n\nfunction ToggleIsFetching() {\nreturn (<div>\n    <img src={preLoader}/>\n</div>)\n}\n\n\nexport default ToggleIsFetching","import React from \"react\";\nimport styles from './FormControls.module.css'\nimport {WrappedFieldProps} from \"redux-form\";\n\nexport const Textarea = ({input, meta, ...props}: any) => {\n    const hasError = meta.touched && meta.error\n    return (\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \" \")}>\n            <div>\n                <textarea{...input} {...props}/>\n            </div>\n            {hasError && <span>{meta.error}</span>}\n\n\n        </div>\n    )\n}\n\n// type InputType = {\n//     meta: {\n//         touched: boolean\n//         error: string \n//     }\n// }\n// type FormControlType=(params:InputType)=>void\n\n\nexport const Input:React.FC<WrappedFieldProps> = ({input, meta: {touched, error}, ...props}: any) => {\n    const hasError = touched && error\n    return (\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \" \")}>\n            <div>\n                <input{...input} {...props} />\n            </div>\n            {hasError && <span>{error}</span>}\n\n\n        </div>\n    )\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__2SPvv\",\"error\":\"FormControls_error__3zfBa\",\"formSummaryError\":\"FormControls_formSummaryError__2ffxR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectPage\":\"Paginator_selectPage__1oWzK\",\"pages\":\"Paginator_pages__1p_3u\",\"myButton\":\"Paginator_myButton__2v63q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myBestFriends\":\"bestFriends_myBestFriends__xGu8l\",\"photoFriend\":\"bestFriends_photoFriend__1tFJi\",\"profileFriend\":\"bestFriends_profileFriend__cc5-K\"};","export const required = (value:any) =>{\nif (value)return undefined;\nreturn 'Field required'\n}\n\n\n\nexport const  maxLengthCreator = (maxLength:any)=>(value:string)=>{\n    if (value.length > maxLength)return `Max lenght is ${maxLength} symbols`\n    return undefined\n}\n\n","import {profileAPI, userAPI} from \"../api/api\";\nimport {Dispatch} from \"redux\";\nimport {stopSubmit} from \"redux-form\";\nimport {v1} from \"uuid\";\n\n\nlet initialState: postsTypeState = {\n    posts: [\n        {id: v1(), message: \"Hi, how are you?\", countLikes: 10},\n        {id: v1(), message: \"Hi, any news?\", countLikes: 133},\n        {id: v1(), message: \"How long have you been here?\", countLikes: 4432},\n    ],\n    profile: null,\n    status: \"\",\n    newPostText: \"\"\n}\n\n\nfunction profileReducer(state: postsTypeState = initialState, action: ProfileActionTypes): postsTypeState {\n    switch (action.type) {\n        case ADD_POST: {\n\n            let newPost: postsType = {\n                id: v1(),\n                message: action.newPostText,\n                countLikes: 0\n            };\n            return {\n                ...state,\n                posts: [...state.posts, newPost],\n            }\n        }\n        case SET_USER_PROFILE: {\n            return {...state, profile: action.profile}\n        }\n        case SET_STATUS_PROFILE: {\n            return {...state, status: action.status}\n        }\n        case SET_STATUS_UPDATE: {\n            return {...state, status: action.status}\n        }\n        case DELETE_POST: {\n            debugger\n            // return state.posts.filter(tl => tl.id != action.postId)\n\n            return {...state,\n                posts: state.posts.filter(p => p.id !== action.postId)}\n        }\n        case SET_SAVE_PHOTO:\n            return {...state, profile: {...state.profile, photos: action.photo} as ProfileType}\n\n\n        default:\n            return state\n    }\n\n\n}\n\n///////////*********ACTIONS**********//////////\n\nexport const addPostActionCreator = (newPostText: string): AddPostActionCreatorType => ({type: ADD_POST, newPostText})\n\n\nexport const setUserProfile = (profile: ProfileType | null): setUserProfileType => ({\n    type: SET_USER_PROFILE, profile: profile\n\n})\n\nexport const setStatusProfile = (status: string): setStatusProfileType => ({\n    type: SET_STATUS_PROFILE, status\n})\nexport const setStatusUpdate = (status: string): setStatusUpdateType => ({\n    type: SET_STATUS_UPDATE, status\n})\nexport const deletePostAC = (postId: number|string): deletePostType => ({\n    type: DELETE_POST, postId\n})\nexport const setSavePhotoAC = (photo: PhotosType): setSavePhotoType => ({\n    type: SET_SAVE_PHOTO, photo\n})\n\n\n/////////*********THUNKS*********/////////\n\n\nexport const getUserProfile = (userId: any) => async (dispatch: Dispatch) => {\n    let response = await userAPI.getProfile(userId)\n    dispatch(setUserProfile(response.data))\n\n}\n\nexport const getUserStatus = (userId: number) => async (dispatch: any) => {\n    let response = await profileAPI.getStatus(userId)\n    dispatch(setStatusProfile(response.data))\n\n}\nexport const getUpdateUserStatus = (status: string) => async (dispatch: any) => {\n    try {\n        let response = await profileAPI.updateStatus(status)\n        if (response.data.resultCode === 0) {\n            dispatch(setStatusUpdate(status))\n        }\n    } catch (error) {\n        debugger\n        alert(error)\n    }\n}\n\nexport const getSavePhotoTC = (file: any) => async (dispatch: Dispatch) => {\n    let response = await profileAPI.savePhoto(file)\n    if (response.data.resultCode === 0) {\n        dispatch(setSavePhotoAC(response.data.data.photos))\n    }\n}\nexport const getSaveInfoTC = (profile: any) => async (dispatch: any, getState: any) => {\n    const userIds: any = getState().auth.userId\n    const response = await profileAPI.saveProfile(profile)\n    if (response.data.resultCode === 0) {\n        dispatch(getUserProfile(userIds))\n    } else {\n        dispatch(stopSubmit('profileDataForm', {_error: response.data.messages[0]}));//ёто нужно будет потом распарсить\n        return Promise.reject(response.data.messages[0])\n    }\n}\n\n///////////*********TYPES**********//////////\nconst ADD_POST = \"ADD-POST\"\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\"\nconst SET_STATUS_PROFILE = \"SET_STATUS_PROFILE\"\nconst SET_STATUS_UPDATE = \"SET_STATUS_UPDATE\"\nconst DELETE_POST = \"DELETE_POST\"\nconst SET_SAVE_PHOTO = \"SET_SAVE_PHOTO\"\n\nexport type ProfileActionTypes =\n    AddPostActionCreatorType\n    | setUserProfileType\n    | setStatusProfileType\n    | setStatusUpdateType\n    | deletePostType\n    | setSavePhotoType\n\n\ntype setSavePhotoType = {\n    type: typeof SET_SAVE_PHOTO\n    photo: PhotosType\n\n}\ntype setStatusUpdateType = {\n    type: typeof SET_STATUS_UPDATE\n    status: string\n}\ntype deletePostType = {\n    type: typeof DELETE_POST\n    postId: number|string\n}\ntype setStatusProfileType = {\n    type: typeof SET_STATUS_PROFILE\n    status: string\n}\ntype setUserProfileType = {\n    type: typeof SET_USER_PROFILE\n    profile: ProfileType | null\n}\ntype AddPostActionCreatorType = {\n    type: typeof ADD_POST\n    newPostText: string\n}\nexport type postsTypeState = {\n    posts: Array<postsType>\n    profile: ProfileType | null\n    status: string\n    newPostText: any\n}\nexport type postsType = {\n    id: number|string;\n    message: string;\n    countLikes: number;\n};\ntype ContactsType = {\n    github: string\n    vk: string\n    facebook: string\n    instagram: string\n    twitter: string\n    website: string\n    youtube: string\n    mainLink: string\n}\nexport type PhotosType = {\n    small: string | null\n    large: string | null\n}\n\n\nexport type ProfileType = {\n    userId: number\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    fullName: string\n    contacts: ContactsType\n    photos: PhotosType\n}\n\n\nexport default profileReducer","import {dialogsDataType, dialogsMessagesDataType} from \"../components/Dialogs/Dialogs\";\nimport {postsTypeState} from \"./profile-reducer\";\n\n// const UPDATE_NEW_MESSAGE_TEXT = \"UPDATE-NEW-MESSAGE-TEXT\"\nconst ADD_MESSAGE = \"ADD-MESSAGE\"\n\nlet initialState = {\n\n    dialogs: [\n        {id: 1, name: \"Artemy\"},\n        {id: 2, name: \"Alevtina\"},\n        {id: 3, name: \"Akseniya\"},\n        {id: 4, name: \"Afonasii\"},\n        {id: 5, name: \"Belanton\"},\n        {id: 6, name: \"Stephan\"},\n        {id: 7, name: \"Stephan\"},\n        {id: 8, name: \"Stephan\"},\n        {id: 9, name: \"Stephan\"},\n    ],\n    messages: [\n        {id: 1, message: \"Hello, how is it going?\"},\n        // { id: 2, message: \"Hey how are you?\" },\n        // { id: 3, message: \"Hey how are you?\" },\n\n    ],\n    newMessageText: \"\"\n\n}\n\n\nfunction dialogsReducer(state: dialogsTypeState = initialState, action: DialogsActionType): dialogsTypeState {\n    let stateCopy;\n\n\n\n    switch (action.type) {\n        // case UPDATE_NEW_MESSAGE_TEXT: {\n        //     stateCopy = {\n        //         ...state,\n        //         newMessageText: action.newMessageText1\n        //     };\n        //     return stateCopy\n        // }\n        case ADD_MESSAGE: {\n\n            let newMessage = action.newMessageText\n            let stateCopy = {\n                ...state,\n                newMessageText: \"\",\n                messages: [...state.messages, {id: 77, message: newMessage}]\n\n            };\n            // let newMessage = {\n            //     id: 77,\n            //     message: state.newMessageText\n            // }\n            return stateCopy\n        }\n        default:\n            return state\n    }\n\n}\n\nexport type DialogsActionType = AddMessageCreatorType\n    // UpdateNEwMessageTextCreator\n\ntype AddMessageCreatorType = {\n    type: typeof ADD_MESSAGE\n    newMessageText:string\n}\n\n\nexport const addMessageCreator = (newMessageText:string): AddMessageCreatorType => ({type: ADD_MESSAGE,newMessageText})\n\n\n\n\nexport type stateTypeFirst = {\n    _state: stateType\n    getState: () => stateType\n    rerenderEntireTree: (state: any) => void\n    subsCribe: (observer: any) => void\n    dispatch: (action: any) => void///КАКОЙ ТИп\n}\n\n\nexport type dialogsTypeState = {\n    dialogs: Array<dialogsDataType>\n    messages: Array<dialogsMessagesDataType>\n    newMessageText:string\n}\nexport type stateType = {\n    profilePage: postsTypeState\n    dialogsPage: dialogsTypeState\n    auth:any\n}\n\nexport default dialogsReducer","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__3rnam\",\"appWrapperContent\":\"App_appWrapperContent__ctAiS\",\"asside\":\"App_asside__hYd0o\",\"header\":\"App_header__3ZZ1n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\",\"icon\":\"Header_icon__2vvCF\",\"loginBlock\":\"Header_loginBlock__6mma5\"};"],"sourceRoot":""}